---
import ArrowIcon from "./utils/ArrowIcon.component.astro";
import Light from "./utils/Light.astro";

interface TeamProps {
    name: string;
    role: string;
    image: string;
    description: string;
    linkedin: string;
    github: string;
    portfolio?: string;
    proyectsNumber: number;
    
}



const team : TeamProps[] = [
    { 
      name: "Leonardo Daniel Rebollo Caleo",
      role: "CEO",
      image: "https://media.licdn.com/dms/image/v2/D5603AQF3EQL9Bs43FQ/profile-displayphoto-shrink_800_800/B56ZRxwc65GoAc-/0/1737075315560?e=1749081600&v=beta&t=ibrNprGNPbv02SS625CxVUumyKec8ix86Z87QwODhLE",
      description: "Soy un aspirante a desarrollador de software profesional con experiencia en web, móvil y un poco de fullstack. He colaborado con diversas empresas, aportando ideas innovadoras para alcanzar sus objetivos junto a mis compañeros. Siempre me consideran una persona responsable que busca soluciones efectivas para resolver problemas en el menor tiempo posible.",
      linkedin: "https://www.linkedin.com/in/leonardo-rebollo-caleo/",
      github: "https://github.com/LeonardoRebolloCaleo",
      portfolio: "https://portafolio-latest.vercel.app",
      proyectsNumber: 3
    },
    { 
      name: "Martin Martinez Arias", 
      role: "CEO",
      image: "/images/team-images/martinpic.webp",
      description: "Desarrollador y tester de software fullstack, con interés en proyectos que generen impacto significativo y dejen una impresión positiva en las personas. Me considero una persona responsable, comprometida con la calidad y en constante búsqueda de mejora continua, tanto a nivel técnico como personal",
      linkedin: "https://www.linkedin.com/in/leonardo-rebollo-caleo/",
      github: "https://github.com/yvngmarti",
      proyectsNumber: 4
    },
    { 
      name: "Crystian Adamir Carrera Rivas", 
      role: "ADMINISTRADOR CENTRAL",
      image: "/images/team-images/crystianpic.webp",
      description: "Ingeniero de soporte de servidores en Universidad Politécnica de Quintana Roo.",
      linkedin: "https://www.linkedin.com/in/crystian-adamir-carrera-rivas-874773313/",
      github: "https://github.com/CrystianACR",
      proyectsNumber: 3
     },
]



---
<section class="team-section" id="team-section">
    <h2>Nuestro equipo</h2>
    <Light color="rgba(19, 58, 255, 0.7)" x={40} y={30} height={70} width={50}/>
    <Light color="rgba(19, 58, 255, 0.7)"  x={0} y={-10} height={70} width={100}/>
    
    <div class="team-container">
        <div class="team-members">
            <button id="prev-button" ><ArrowIcon direction="0" color="white" size="1" /></button>
            {
                team.map((member, index) => (
                    <div class={index === 0 ? "team-member active" : "team-member"}>
                        <img src={member.image} alt={member.name} />
                     
                        <div class="team-member-info">
                            <div class="team-member-info-container">
                                <div class="team-member-info-name-role">
                                    <h3>{member.name}</h3>
                                    <p>{member.role}</p>
                                </div>
                                <div class="team-member-info-description">
                                    <p>{member.description}</p>
                                </div>
                            </div>
                           <div class="team-member-info-socials">
                                <a class="social-buttons" href={member.linkedin} target="_blank">Linkedin <i class="fa-brands fa-linkedin"></i></a>
                                <a class="social-buttons" href={member.github} target="_blank">Github <i class="fa-brands fa-github"></i></a>
                                {member.portfolio &&  <a class="social-buttons" href={member.portfolio} target="_blank">Portafolio <i class="fa-solid fa-briefcase"></i></a>}
                               
    
                                <p>Proyectos realizados: {member.proyectsNumber}</p>
    
                           </div>
                        </div>
                        
                    </div>
                ))
            }
            <button id="next-button"><ArrowIcon direction="180" color="white" size="1" /></button>
        </div>
        <div class="team-members-dots">
            {
                team.map((_member, index) =>{
                    return <div class={index === 0 ? "team-member-dot active" : "team-member-dot"}></div>
                })
            }

        </div>
       
    
    </div>
</section>

<script>
    let index = 0;
    const teamMembers = document.querySelectorAll(".team-member");
    const teamMemberDots = document.querySelectorAll(".team-member-dot");
    const prevButton = document.getElementById("prev-button");
    const nextButton = document.getElementById("next-button");

    function changeIndex(indx: number){
        teamMembers.forEach((element, i) =>{
           if(indx === i){
              element.classList.add("active");
              teamMemberDots[i].classList.add("active");
           }
           else{
              element.classList.remove("active");
              teamMemberDots[i].classList.remove("active");
           }
        })
    }

    if(prevButton && nextButton){
        prevButton.addEventListener("click", () => {
            index = (index - 1 + teamMembers.length) % teamMembers.length;
            changeIndex(index);
        })

        nextButton.addEventListener("click", () => {
            index = (index + 1) % teamMembers.length;
            changeIndex(index);
        })
    }

    if(teamMemberDots){
        teamMemberDots.forEach((dot, i) => {
            dot.addEventListener("click", () => {
                index = i;
                changeIndex(index);
            })
        })
    }

    setTimeout(() => {
        index = (index + 1) % teamMembers.length;
        changeIndex(index);
    }, 5000);



    const teamSection = document.getElementById("team-section");
  
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 } 
    );
  
    if (teamSection) {
      observer.observe(teamSection);
    }
    
 
</script>